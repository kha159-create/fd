name: Build and Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: write   # 🔑 ضروري عشان البوت يقدر يعمل push

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          echo "🔧 Installing dependencies..."
          # محاولة npm ci أولاً، إذا فشل استخدم npm install
          if ! npm ci --prefer-offline --no-audit; then
            echo "⚠️ npm ci failed, falling back to npm install..."
            echo "🧹 Cleaning up node_modules and package-lock.json..."
            rm -rf node_modules package-lock.json
            echo "📦 Running fresh npm install..."
            npm install --no-audit --no-fund
            echo "✅ Dependencies installed successfully"
          else
            echo "✅ Dependencies installed with npm ci"
          fi

      - name: Verify installation
        run: |
          echo "🔍 Verifying installation..."
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Checking if node_modules exists: $(ls -la | grep node_modules || echo 'Not found')"
          echo "Checking package-lock.json: $(ls -la package-lock.json 2>/dev/null && echo 'Exists' || echo 'Not found')"
          echo "Listing installed packages:"
          npm list --depth=0 --json | head -20

      - name: Check secrets availability
        run: |
          echo "Checking GitHub Secrets..."
          if [ -z "${{ secrets.VITE_FIREBASE_API_KEY }}" ]; then
            echo "❌ VITE_FIREBASE_API_KEY is missing"
          else
            echo "✅ VITE_FIREBASE_API_KEY is available"
          fi
          if [ -z "${{ secrets.VITE_FIREBASE_PROJECT_ID }}" ]; then
            echo "❌ VITE_FIREBASE_PROJECT_ID is missing"
          else
            echo "✅ VITE_FIREBASE_PROJECT_ID is available"
          fi
          if [ -z "${{ secrets.VITE_GEMINI_API_KEY }}" ]; then
            echo "❌ VITE_GEMINI_API_KEY is missing"
          else
            echo "✅ VITE_GEMINI_API_KEY is available"
          fi
          if [ -z "${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" ]; then
            echo "❌ VITE_FIREBASE_AUTH_DOMAIN is missing"
          else
            echo "✅ VITE_FIREBASE_AUTH_DOMAIN is available"
          fi

      - name: Create environment file
        run: |
          echo "VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}" >> .env
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}" >> .env
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}" >> .env
          echo "VITE_GEMINI_API_KEY=${{ secrets.VITE_GEMINI_API_KEY }}" >> .env
          echo "VITE_APP_ENVIRONMENT=production" >> .env
          
          echo "Environment file created:"
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}"
          echo "VITE_GEMINI_API_KEY=***hidden***"
          
          echo "Checking .env file contents:"
          echo "Lines in .env: $(wc -l < .env)"
          echo "VITE_FIREBASE_API_KEY exists: $(grep -c 'VITE_FIREBASE_API_KEY' .env)"
          echo "VITE_FIREBASE_PROJECT_ID exists: $(grep -c 'VITE_FIREBASE_PROJECT_ID' .env)"
          echo "VITE_GEMINI_API_KEY exists: $(grep -c 'VITE_GEMINI_API_KEY' .env)"

      - name: Build project
        run: |
          echo "🏗️ Building project..."
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Running npm run build..."
          npm run build
          echo "✅ Build completed successfully"
          echo "Checking dist directory:"
          ls -la dist/ || echo "dist directory not found"

      - name: Create .nojekyll file
        run: |
          echo "📄 Creating .nojekyll file..."
          touch dist/.nojekyll
          echo "✅ .nojekyll file created"

      - name: Verify build output
        run: |
          echo "🔍 Verifying build output..."
          echo "Dist directory contents:"
          ls -la dist/
          echo "Checking for essential files:"
          [ -f "dist/index.html" ] && echo "✅ index.html exists" || echo "❌ index.html missing"
          [ -f "dist/manifest.json" ] && echo "✅ manifest.json exists" || echo "❌ manifest.json missing"
          [ -f "dist/sw.js" ] && echo "✅ sw.js exists" || echo "❌ sw.js missing"
          [ -f "dist/icon-192.png" ] && echo "✅ icon-192.png exists" || echo "❌ icon-192.png missing"
          [ -f "dist/icon-512.png" ] && echo "✅ icon-512.png exists" || echo "❌ icon-512.png missing"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./dist
          user_name: github-actions[bot]
          user_email: github-actions[bot]@users.noreply.github.com
